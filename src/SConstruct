#!/usr/bin/env scons
# vim:ft=python
import re
import os
import sys
gcc_check = re.compile(r'gcc')
gxx_check = re.compile(r'g\+\+')
clangxx_check = re.compile(r'clang\+\+')
clang_check = re.compile(r'clang')
msvc_script_default = "c:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\bin\\vcvars32.bat"

buildmode = ARGUMENTS.get('mode', 'release')
ccflags_common  = []
ccflags_debug   = []
ccflags_release = []
env = None
if os.name == 'nt':
    msvc_script = ARGUMENTS.get('msvc', None)
    if msvc_script is None:
        msvc_script = msvc_script_default
    if not os.access(msvc_script, os.R_OK):
        print("Error: MSVC script not found.\n\t%s" % msvc_script)
        print("Specify one with `scons msvc=[path]")
        sys.exit(1)
    env = Environment(CPPPATH = ['.'], MSVC_USE_SCRIPT = msvc_script)
    # XXX We don't support mingw32. Will do it later.
    compiler = 'cl'
    ccflags_release = ccflags_common + [ "/DNDEBUG" ]
else:
    compiler = ARGUMENTS.get('cc', None)
    if compiler is None:
        env = Environment(CPPPATH=[ '.' ])
        compiler = env['CC']
    else:
        env = Environment(CPPPATH=[ '.' ], CC=compiler)
    if compiler is not None:
        if gxx_check.search(compiler) is not None:
            ccflags_debug = ccflags_common + [ "-g" ]
            ccflags_release = ccflags_common + [ "-O2", "-DNDEBUG" ]
        elif gcc_check.search(compiler) is not None:
            ccflags_common = [ "-std=c89" ]
            ccflags_debug = ccflags_common + [ "-g" ]
            ccflags_release = ccflags_common + [ "-O2", "-DNDEBUG" ]
        elif clangxx_check.search(compiler) is not None:
            ccflags_debug = ccflags_common + [ "-g" ]
            ccflags_release = ccflags_common + [ "-O2", "-DNDEBUG" ]
        elif clang_check.search(compiler) is not None:
            ccflags_debug = ccflags_common + [ "-g" ]
            ccflags_release = ccflags_common + [ "-O2", "-DNDEBUG" ]

if buildmode.upper() == 'DEBUG':
    ccflags = ccflags_debug
elif buildmode.upper() == 'RELEASE':
    ccflags = ccflags_release
else:
    print("Warning: Unknown mode = %s, fallback to release", buildmode)
print("Parameter: mode = %s, cc = %s" % (buildmode, compiler))
env.Append(CCFLAGS=ccflags)

# Library
libesch_src = [ \
        'esch_object.c', 'esch_type.c', \
        'esch_alloc.c', 'esch_log.c', \
        'esch_config.c', 'esch_gc.c', \
        'esch_string.c', 'esch_range.c' \
        # 'esch_vector.c'
        ]
esch = env.StaticLibrary('esch', libesch_src)
# Unit test
utest_src = [ 'utest/esch_utest.c', \
              'utest/esch_t_alloc.c', \
              'utest/esch_t_string.c', \
              'utest/esch_t_gc.c' \
              #'utest/esch_t_vector.c' \
            ]
esch_utest = env.Program('esch_utest', utest_src, LIBS=[ 'esch' ], \
                         LIBPATH=[ '.' ])
# Dependencies
env.Depends(esch_utest, esch)
