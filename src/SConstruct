#!/usr/bin/env scons
# vim:ft=python
import re
gcc_check = re.compile(r'gcc')
gxx_check = re.compile(r'g\+\+')
clangxx_check = re.compile(r'clang\+\+')
clang_check = re.compile(r'clang')

compiler = ARGUMENTS.get('cc', None)
buildmode = ARGUMENTS.get('mode', 'release')
if compiler is None:
    env = Environment(CPPPATH=[ '.' ])
    compiler = env['CC']
else:
    env = Environment(CPPPATH=[ '.' ], CC=compiler)

ccflags_common  = []
ccflags_debug   = []
ccflags_release = []
if compiler is not None:
    if gxx_check.search(compiler) is not None:
        ccflags_debug = ccflags_common + [ "-g" ]
        ccflags_release = ccflags_common + [ "-O2", "-DNDEBUG" ]
    elif gcc_check.search(compiler) is not None:
        ccflags_common = [ "-std=c89" ]
        ccflags_debug = ccflags_common + [ "-g" ]
        ccflags_release = ccflags_common + [ "-O2", "-DNDEBUG" ]
    elif clangxx_check.search(compiler) is not None:
        ccflags_debug = ccflags_common + [ "-g" ]
        ccflags_release = ccflags_common + [ "-O2", "-DNDEBUG" ]
    elif clang_check.search(compiler) is not None:
        ccflags_debug = ccflags_common + [ "-g" ]
        ccflags_release = ccflags_common + [ "-O2", "-DNDEBUG" ]

if buildmode.upper() == 'DEBUG':
    ccflags = ccflags_debug
elif buildmode.upper() == 'RELEASE':
    ccflags = ccflags_release
else:
    print("Warning: Unknown mode = %s, fallback to release", buildmode)
print("Build mode = %s, compiler = %s" % (buildmode, compiler))
env.Append(CCFLAGS=ccflags)

# Library
libesch_src = ['esch_alloc.c', 'esch_log.c', 'esch_parser.c', \
               'esch_string.c', 'esch_range.c', 'esch_list.c', \
               'esch_object.c', 'esch_config.c' ]
esch = env.StaticLibrary('esch', libesch_src)
# Unit test
utest_src = [ 'utest/esch_utest.c', \
              'utest/esch_t_alloc.c', \
              'utest/esch_t_parser.c', \
              'utest/esch_t_string.c', \
              'utest/esch_t_list.c' \
            ]
esch_utest = env.Program('esch_utest', utest_src, LIBS=[ 'esch' ], \
                         LIBPATH=[ '.' ])
# Dependencies
env.Depends(esch_utest, esch)
